//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// CM Informatik AG
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace CMI.Contract.Common.Entities
{

    public static partial class CollectionConverter
    {

        public static CollectionDto ToDto(this CMI.Access.Sql.Viaduc.EF.Collection source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static CollectionDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.Collection source, int level)
        {
            if (source == null)
              return null;

            var target = new CollectionDto();

            // Properties
            target.CollectionId = source.CollectionId;
            target.ParentId = source.ParentId;
            target.Language = source.Language;
            target.Title = source.Title;
            target.DescriptionShort = source.DescriptionShort;
            target.Description = source.Description;
            target.ValidFrom = source.ValidFrom;
            target.ValidTo = source.ValidTo;
            target.CollectionTypeId = source.CollectionTypeId;
            target.Image = source.Image;
            target.Thumbnail = source.Thumbnail;
            target.ImageAltText = source.ImageAltText;
            target.ImageMimeType = source.ImageMimeType;
            target.Link = source.Link;
            target.CollectionPath = source.CollectionPath;
            target.SortOrder = source.SortOrder;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;

            // Navigation Properties
            if (level > 0) {
              target.ChildCollections = source.ChildCollections.ToDtosWithRelated(level - 1);
              target.Parent = source.Parent.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.Collection ToEntity(this CollectionDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.Collection();

            // Properties
            target.CollectionId = source.CollectionId;
            target.ParentId = source.ParentId;
            target.Language = source.Language;
            target.Title = source.Title;
            target.DescriptionShort = source.DescriptionShort;
            target.Description = source.Description;
            target.ValidFrom = source.ValidFrom;
            target.ValidTo = source.ValidTo;
            target.CollectionTypeId = source.CollectionTypeId;
            target.Image = source.Image;
            target.Thumbnail = source.Thumbnail;
            target.ImageAltText = source.ImageAltText;
            target.ImageMimeType = source.ImageMimeType;
            target.Link = source.Link;
            target.CollectionPath = source.CollectionPath;
            target.SortOrder = source.SortOrder;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<CollectionDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.Collection> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<CollectionDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.Collection> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.Collection> ToEntities(this IEnumerable<CollectionDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.Collection source, CollectionDto target);

        static partial void OnEntityCreating(CollectionDto source, CMI.Access.Sql.Viaduc.EF.Collection target);

    }

    public static partial class CollectionListItemConverter
    {

        public static CollectionListItemDto ToDto(this CMI.Access.Sql.Viaduc.EF.CollectionListItem source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static CollectionListItemDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.CollectionListItem source, int level)
        {
            if (source == null)
              return null;

            var target = new CollectionListItemDto();

            // Properties
            target.CollectionId = source.CollectionId;
            target.ParentId = source.ParentId;
            target.Language = source.Language;
            target.Title = source.Title;
            target.DescriptionShort = source.DescriptionShort;
            target.Description = source.Description;
            target.ValidFrom = source.ValidFrom;
            target.ValidTo = source.ValidTo;
            target.CollectionTypeId = source.CollectionTypeId;
            target.ImageAltText = source.ImageAltText;
            target.ImageMimeType = source.ImageMimeType;
            target.Link = source.Link;
            target.CollectionPath = source.CollectionPath;
            target.SortOrder = source.SortOrder;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;
            target.Parent = source.Parent;
            target.ChildCollections = source.ChildCollections;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.CollectionListItem ToEntity(this CollectionListItemDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.CollectionListItem();

            // Properties
            target.CollectionId = source.CollectionId;
            target.ParentId = source.ParentId;
            target.Language = source.Language;
            target.Title = source.Title;
            target.DescriptionShort = source.DescriptionShort;
            target.Description = source.Description;
            target.ValidFrom = source.ValidFrom;
            target.ValidTo = source.ValidTo;
            target.CollectionTypeId = source.CollectionTypeId;
            target.ImageAltText = source.ImageAltText;
            target.ImageMimeType = source.ImageMimeType;
            target.Link = source.Link;
            target.CollectionPath = source.CollectionPath;
            target.SortOrder = source.SortOrder;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;
            target.Parent = source.Parent;
            target.ChildCollections = source.ChildCollections;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<CollectionListItemDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.CollectionListItem> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<CollectionListItemDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.CollectionListItem> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.CollectionListItem> ToEntities(this IEnumerable<CollectionListItemDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.CollectionListItem source, CollectionListItemDto target);

        static partial void OnEntityCreating(CollectionListItemDto source, CMI.Access.Sql.Viaduc.EF.CollectionListItem target);

    }

    public static partial class ApplicationUserConverter
    {

        public static ApplicationUserDto ToDto(this CMI.Access.Sql.Viaduc.EF.ApplicationUser source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ApplicationUserDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.ApplicationUser source, int level)
        {
            if (source == null)
              return null;

            var target = new ApplicationUserDto();

            // Properties
            target.ID = source.ID;
            target.FamilyName = source.FamilyName;
            target.FirstName = source.FirstName;
            target.Organization = source.Organization;
            target.Street = source.Street;
            target.StreetAttachment = source.StreetAttachment;
            target.ZipCode = source.ZipCode;
            target.Town = source.Town;
            target.CountryCode = source.CountryCode;
            target.EmailAddress = source.EmailAddress;
            target.PhoneNumber = source.PhoneNumber;
            target.SkypeName = source.SkypeName;
            target.Setting = source.Setting;
            target.Claims = source.Claims;
            target.Created = source.Created;
            target.Updated = source.Updated;
            target.Fulltext = source.Fulltext;
            target.UserExtId = source.UserExtId;
            target.Language = source.Language;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;
            target.Birthday = source.Birthday;
            target.FabasoftDossier = source.FabasoftDossier;
            target.ReasonForRejection = source.ReasonForRejection;
            target.IsInternalUser = source.IsInternalUser;
            target.RolePublicClient = source.RolePublicClient;
            target.EiamRoles = source.EiamRoles;
            target.ResearcherGroup = source.ResearcherGroup;
            target.BarInternalConsultation = source.BarInternalConsultation;
            target.IdentifierDocument = source.IdentifierDocument;
            target.MobileNumber = source.MobileNumber;
            target.ReasonForRejectionDate = source.ReasonForRejectionDate;
            target.DownloadLimitDisabledUntil = source.DownloadLimitDisabledUntil;
            target.DigitalisierungsbeschraenkungAufgehobenBis = source.DigitalisierungsbeschraenkungAufgehobenBis;
            target.ActiveAspNetSessionId = source.ActiveAspNetSessionId;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.ApplicationUser ToEntity(this ApplicationUserDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.ApplicationUser();

            // Properties
            target.ID = source.ID;
            target.FamilyName = source.FamilyName;
            target.FirstName = source.FirstName;
            target.Organization = source.Organization;
            target.Street = source.Street;
            target.StreetAttachment = source.StreetAttachment;
            target.ZipCode = source.ZipCode;
            target.Town = source.Town;
            target.CountryCode = source.CountryCode;
            target.EmailAddress = source.EmailAddress;
            target.PhoneNumber = source.PhoneNumber;
            target.SkypeName = source.SkypeName;
            target.Setting = source.Setting;
            target.Claims = source.Claims;
            target.Created = source.Created;
            target.Updated = source.Updated;
            target.Fulltext = source.Fulltext;
            target.UserExtId = source.UserExtId;
            target.Language = source.Language;
            target.CreatedOn = source.CreatedOn;
            target.CreatedBy = source.CreatedBy;
            target.ModifiedOn = source.ModifiedOn;
            target.ModifiedBy = source.ModifiedBy;
            target.Birthday = source.Birthday;
            target.FabasoftDossier = source.FabasoftDossier;
            target.ReasonForRejection = source.ReasonForRejection;
            target.IsInternalUser = source.IsInternalUser;
            target.RolePublicClient = source.RolePublicClient;
            target.EiamRoles = source.EiamRoles;
            target.ResearcherGroup = source.ResearcherGroup;
            target.BarInternalConsultation = source.BarInternalConsultation;
            target.IdentifierDocument = source.IdentifierDocument;
            target.MobileNumber = source.MobileNumber;
            target.ReasonForRejectionDate = source.ReasonForRejectionDate;
            target.DownloadLimitDisabledUntil = source.DownloadLimitDisabledUntil;
            target.DigitalisierungsbeschraenkungAufgehobenBis = source.DigitalisierungsbeschraenkungAufgehobenBis;
            target.ActiveAspNetSessionId = source.ActiveAspNetSessionId;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ApplicationUserDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ApplicationUser> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ApplicationUserDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ApplicationUser> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.ApplicationUser> ToEntities(this IEnumerable<ApplicationUserDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.ApplicationUser source, ApplicationUserDto target);

        static partial void OnEntityCreating(ApplicationUserDto source, CMI.Access.Sql.Viaduc.EF.ApplicationUser target);

    }

    public static partial class ManuelleKorrekturConverter
    {

        public static ManuelleKorrekturDto ToDto(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ManuelleKorrekturDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur source, int level)
        {
            if (source == null)
              return null;

            var target = new ManuelleKorrekturDto();

            // Properties
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.VeId = source.VeId;
            target.Signatur = source.Signatur;
            target.Schutzfristende = source.Schutzfristende;
            target.Titel = source.Titel;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;
            target.GeändertAm = source.GeändertAm;
            target.GeändertVon = source.GeändertVon;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.Kommentar = source.Kommentar;
            target.Hierachiestufe = source.Hierachiestufe;
            target.Aktenzeichen = source.Aktenzeichen;
            target.Entstehungszeitraum = source.Entstehungszeitraum;
            target.ZugänglichkeitGemässBGA = source.ZugänglichkeitGemässBGA;
            target.Schutzfristverzeichnung = source.Schutzfristverzeichnung;
            target.ZuständigeStelle = source.ZuständigeStelle;
            target.Publikationsrechte = source.Publikationsrechte;
            target.AnonymisiertZumErfassungszeitpunk = source.AnonymisiertZumErfassungszeitpunk;

            // Navigation Properties
            if (level > 0) {
              target.ManuelleKorrekturFelder = source.ManuelleKorrekturFelder.ToDtosWithRelated(level - 1);
              target.ManuelleKorrekturStatusHistories = source.ManuelleKorrekturStatusHistories.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur ToEntity(this ManuelleKorrekturDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur();

            // Properties
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.VeId = source.VeId;
            target.Signatur = source.Signatur;
            target.Schutzfristende = source.Schutzfristende;
            target.Titel = source.Titel;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;
            target.GeändertAm = source.GeändertAm;
            target.GeändertVon = source.GeändertVon;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.Kommentar = source.Kommentar;
            target.Hierachiestufe = source.Hierachiestufe;
            target.Aktenzeichen = source.Aktenzeichen;
            target.Entstehungszeitraum = source.Entstehungszeitraum;
            target.ZugänglichkeitGemässBGA = source.ZugänglichkeitGemässBGA;
            target.Schutzfristverzeichnung = source.Schutzfristverzeichnung;
            target.ZuständigeStelle = source.ZuständigeStelle;
            target.Publikationsrechte = source.Publikationsrechte;
            target.AnonymisiertZumErfassungszeitpunk = source.AnonymisiertZumErfassungszeitpunk;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ManuelleKorrekturDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ManuelleKorrekturDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur> ToEntities(this IEnumerable<ManuelleKorrekturDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur source, ManuelleKorrekturDto target);

        static partial void OnEntityCreating(ManuelleKorrekturDto source, CMI.Access.Sql.Viaduc.EF.ManuelleKorrektur target);

    }

    public static partial class ManuelleKorrekturFeldConverter
    {

        public static ManuelleKorrekturFeldDto ToDto(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ManuelleKorrekturFeldDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld source, int level)
        {
            if (source == null)
              return null;

            var target = new ManuelleKorrekturFeldDto();

            // Properties
            target.ManuelleKorrekturFelderId = source.ManuelleKorrekturFelderId;
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.Feldname = source.Feldname;
            target.Original = source.Original;
            target.Automatisch = source.Automatisch;
            target.Manuell = source.Manuell;

            // Navigation Properties
            if (level > 0) {
              target.ManuelleKorrektur = source.ManuelleKorrektur.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld ToEntity(this ManuelleKorrekturFeldDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld();

            // Properties
            target.ManuelleKorrekturFelderId = source.ManuelleKorrekturFelderId;
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.Feldname = source.Feldname;
            target.Original = source.Original;
            target.Automatisch = source.Automatisch;
            target.Manuell = source.Manuell;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ManuelleKorrekturFeldDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ManuelleKorrekturFeldDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld> ToEntities(this IEnumerable<ManuelleKorrekturFeldDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld source, ManuelleKorrekturFeldDto target);

        static partial void OnEntityCreating(ManuelleKorrekturFeldDto source, CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturFeld target);

    }

    public static partial class ManuelleKorrekturStatusHistoryConverter
    {

        public static ManuelleKorrekturStatusHistoryDto ToDto(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ManuelleKorrekturStatusHistoryDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory source, int level)
        {
            if (source == null)
              return null;

            var target = new ManuelleKorrekturStatusHistoryDto();

            // Properties
            target.ManuelleKorrekturStatusHistoryId = source.ManuelleKorrekturStatusHistoryId;
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;

            // Navigation Properties
            if (level > 0) {
              target.ManuelleKorrektur = source.ManuelleKorrektur.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory ToEntity(this ManuelleKorrekturStatusHistoryDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory();

            // Properties
            target.ManuelleKorrekturStatusHistoryId = source.ManuelleKorrekturStatusHistoryId;
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ManuelleKorrekturStatusHistoryDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ManuelleKorrekturStatusHistoryDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory> ToEntities(this IEnumerable<ManuelleKorrekturStatusHistoryDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory source, ManuelleKorrekturStatusHistoryDto target);

        static partial void OnEntityCreating(ManuelleKorrekturStatusHistoryDto source, CMI.Access.Sql.Viaduc.EF.ManuelleKorrekturStatusHistory target);

    }

    public static partial class VManuelleKorrekturConverter
    {

        public static VManuelleKorrekturDto ToDto(this CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static VManuelleKorrekturDto ToDtoWithRelated(this CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur source, int level)
        {
            if (source == null)
              return null;

            var target = new VManuelleKorrekturDto();

            // Properties
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.VeId = source.VeId;
            target.Signatur = source.Signatur;
            target.Schutzfristende = source.Schutzfristende;
            target.Titel = source.Titel;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;
            target.GeändertAm = source.GeändertAm;
            target.GeändertVon = source.GeändertVon;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.Kommentar = source.Kommentar;
            target.Hierachiestufe = source.Hierachiestufe;
            target.Aktenzeichen = source.Aktenzeichen;
            target.Entstehungszeitraum = source.Entstehungszeitraum;
            target.ZugänglichkeitGemässBGA = source.ZugänglichkeitGemässBGA;
            target.Schutzfristverzeichnung = source.Schutzfristverzeichnung;
            target.ZuständigeStelle = source.ZuständigeStelle;
            target.Publikationsrechte = source.Publikationsrechte;
            target.AnonymisiertZumErfassungszeitpunk = source.AnonymisiertZumErfassungszeitpunk;
            target.TitelGemAIS = source.TitelGemAIS;
            target.TitelAutomatischAnonymisiert = source.TitelAutomatischAnonymisiert;
            target.TitelManuellKorrigiert = source.TitelManuellKorrigiert;
            target.DarinGemAIS = source.DarinGemAIS;
            target.DarinAutomatischAnonymisiert = source.DarinAutomatischAnonymisiert;
            target.DarinManuellKorrigiert = source.DarinManuellKorrigiert;
            target.ZusatzkomponenteGemAIS = source.ZusatzkomponenteGemAIS;
            target.ZusatzkomponenteAutomatischAnonymisiert = source.ZusatzkomponenteAutomatischAnonymisiert;
            target.ZusatzkomponenteManuellKorrigiert = source.ZusatzkomponenteManuellKorrigiert;
            target.ZusaetzlicheInformationenGemAIS = source.ZusaetzlicheInformationenGemAIS;
            target.ZusaetzlicheInformationenAutomatischAnonymisiert = source.ZusaetzlicheInformationenAutomatischAnonymisiert;
            target.ZusaetzlicheInformationenManuellKorrigiert = source.ZusaetzlicheInformationenManuellKorrigiert;
            target.VerwandteVEGemAIS = source.VerwandteVEGemAIS;
            target.VerwandteVEAutomatischAnonymisiert = source.VerwandteVEAutomatischAnonymisiert;
            target.VerwandteVEManuellKorrigiert = source.VerwandteVEManuellKorrigiert;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur ToEntity(this VManuelleKorrekturDto source)
        {
            if (source == null)
              return null;

            var target = new CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur();

            // Properties
            target.ManuelleKorrekturId = source.ManuelleKorrekturId;
            target.VeId = source.VeId;
            target.Signatur = source.Signatur;
            target.Schutzfristende = source.Schutzfristende;
            target.Titel = source.Titel;
            target.ErzeugtAm = source.ErzeugtAm;
            target.ErzeugtVon = source.ErzeugtVon;
            target.GeändertAm = source.GeändertAm;
            target.GeändertVon = source.GeändertVon;
            target.Anonymisierungsstatus = source.Anonymisierungsstatus;
            target.Kommentar = source.Kommentar;
            target.Hierachiestufe = source.Hierachiestufe;
            target.Aktenzeichen = source.Aktenzeichen;
            target.Entstehungszeitraum = source.Entstehungszeitraum;
            target.ZugänglichkeitGemässBGA = source.ZugänglichkeitGemässBGA;
            target.Schutzfristverzeichnung = source.Schutzfristverzeichnung;
            target.ZuständigeStelle = source.ZuständigeStelle;
            target.Publikationsrechte = source.Publikationsrechte;
            target.AnonymisiertZumErfassungszeitpunk = source.AnonymisiertZumErfassungszeitpunk;
            target.TitelGemAIS = source.TitelGemAIS;
            target.TitelAutomatischAnonymisiert = source.TitelAutomatischAnonymisiert;
            target.TitelManuellKorrigiert = source.TitelManuellKorrigiert;
            target.DarinGemAIS = source.DarinGemAIS;
            target.DarinAutomatischAnonymisiert = source.DarinAutomatischAnonymisiert;
            target.DarinManuellKorrigiert = source.DarinManuellKorrigiert;
            target.ZusatzkomponenteGemAIS = source.ZusatzkomponenteGemAIS;
            target.ZusatzkomponenteAutomatischAnonymisiert = source.ZusatzkomponenteAutomatischAnonymisiert;
            target.ZusatzkomponenteManuellKorrigiert = source.ZusatzkomponenteManuellKorrigiert;
            target.ZusaetzlicheInformationenGemAIS = source.ZusaetzlicheInformationenGemAIS;
            target.ZusaetzlicheInformationenAutomatischAnonymisiert = source.ZusaetzlicheInformationenAutomatischAnonymisiert;
            target.ZusaetzlicheInformationenManuellKorrigiert = source.ZusaetzlicheInformationenManuellKorrigiert;
            target.VerwandteVEGemAIS = source.VerwandteVEGemAIS;
            target.VerwandteVEAutomatischAnonymisiert = source.VerwandteVEAutomatischAnonymisiert;
            target.VerwandteVEManuellKorrigiert = source.VerwandteVEManuellKorrigiert;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<VManuelleKorrekturDto> ToDtos(this IEnumerable<CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<VManuelleKorrekturDto> ToDtosWithRelated(this IEnumerable<CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur> ToEntities(this IEnumerable<VManuelleKorrekturDto> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur source, VManuelleKorrekturDto target);

        static partial void OnEntityCreating(VManuelleKorrekturDto source, CMI.Access.Sql.Viaduc.EF.VManuelleKorrektur target);

    }

}
