// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var iiif = Iiif.FromJson(jsonString);
//


// See: https://app.quicktype.io/


namespace Iiif.API.Presentation
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Presentation
    {
        [JsonProperty("@context")]
        public object Context { get; set; }

        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        /// <summary>
        /// If you are validating a manifest, you may get this error if there are errors in the
        /// manifest. The validator first validates it as a manifest and if that fails it will try
        /// and validate it using the other types.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("behavior", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Behavior { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<IiifItem> Items { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredStatementElement> Metadata { get; set; }

        [JsonProperty("navDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NavDate { get; set; }

        [JsonProperty("navPlace", NullValueHandling = NullValueHandling.Ignore)]
        public NavPlace NavPlace { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProviderElement> Provider { get; set; }

        [JsonProperty("rendering", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> Rendering { get; set; }

        [JsonProperty("requiredStatement", NullValueHandling = NullValueHandling.Ignore)]
        public RequiredStatementElement RequiredStatement { get; set; }

        [JsonProperty("rights", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Rights { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Services { get; set; }

        [JsonProperty("start")]
        public object Start { get; set; }

        [JsonProperty("structures", NullValueHandling = NullValueHandling.Ignore)]
        public List<StructureElement> Structures { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Summary { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Thumbnail { get; set; }

        [JsonProperty("viewingDirection", NullValueHandling = NullValueHandling.Ignore)]
        public string ViewingDirection { get; set; }
    }

    public partial class ThumbnailElement
    {
        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double? Duration { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }
    }

    public partial class BodyClass
    {
        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double? Duration { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Items { get; set; }
    }

    public partial class AnnotationItem
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("body", NullValueHandling = NullValueHandling.Ignore)]
        public Body? Body { get; set; }

        [JsonProperty("motivation", NullValueHandling = NullValueHandling.Ignore)]
        public Motivation? Motivation { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("target")]
        public Target Target { get; set; }
    }

    public partial class AnnotationElement
    {
        [JsonProperty("@context")]
        public object Context { get; set; }

        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationItem> Items { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class LanguageValue
    {
        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> German { get; set; }

        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Englisch { get; set; }

        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> French { get; set; }

        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Italian { get; set; }

        [JsonProperty("none", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Invariant { get; set; }

    }

    public partial class ServiceElement
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri IiiId { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string IiiType { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public string Profile { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("@id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("@type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class PurpleAnnotationTargetCanAlsoContainJustScopeAndSource
    {
        [JsonProperty("accessibility", NullValueHandling = NullValueHandling.Ignore)]
        public string Accessibility { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
        public Selector? Selector { get; set; }

        [JsonProperty("source")]
        public Uri Source { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("scope", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Scope { get; set; }
    }

    public partial class SelectorClass
    {
        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double? T { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class FluffyAnnotationTargetCanAlsoContainJustScopeAndSource
    {
        [JsonProperty("accessibility", NullValueHandling = NullValueHandling.Ignore)]
        public string Accessibility { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
        public Selector? Selector { get; set; }

        [JsonProperty("source")]
        public Uri Source { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("scope", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Scope { get; set; }
    }

    public partial class HomepageElement
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Language { get; set; }
    }

    public partial class IiifItem
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        /// <summary>
        /// If you are validating a manifest, you may get this error if there are errors in the
        /// manifest. The validator first validates it as a manifest and if that fails it will try
        /// and validate it using the other types.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("behavior", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Behavior { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(MinMaxValueCheckConverter))]
        public double? Duration { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public long? Height { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationPage> Items { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredStatementElement> Metadata { get; set; }

        [JsonProperty("navDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NavDate { get; set; }

        [JsonProperty("navPlace", NullValueHandling = NullValueHandling.Ignore)]
        public NavPlace NavPlace { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProviderElement> Provider { get; set; }

        [JsonProperty("requiredStatement", NullValueHandling = NullValueHandling.Ignore)]
        public RequiredStatementElement RequiredStatement { get; set; }

        [JsonProperty("rights", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Rights { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Summary { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Thumbnail { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public long? Width { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Services { get; set; }

        [JsonProperty("body", NullValueHandling = NullValueHandling.Ignore)]
        public Body? Body { get; set; }

        [JsonProperty("motivation", NullValueHandling = NullValueHandling.Ignore)]
        public Motivation? Motivation { get; set; }

        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public Target? Target { get; set; }
    }

    public partial class AnnotationPage
    {
        [JsonProperty("@context")]
        public object Context { get; set; }

        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Annotation> Items { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        /// <summary>
        /// If you are validating a manifest, you may get this error if there are errors in the
        /// manifest. The validator first validates it as a manifest and if that fails it will try
        /// and validate it using the other types.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Thumbnail { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("behavior", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Behavior { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredStatementElement> Metadata { get; set; }

        [JsonProperty("navDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NavDate { get; set; }

        [JsonProperty("navPlace", NullValueHandling = NullValueHandling.Ignore)]
        public NavPlace NavPlace { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProviderElement> Provider { get; set; }

        [JsonProperty("requiredStatement", NullValueHandling = NullValueHandling.Ignore)]
        public RequiredStatementElement RequiredStatement { get; set; }

        [JsonProperty("rights", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Rights { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Services { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Summary { get; set; }
    }

    public partial class Annotation
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        /// <summary>
        /// If you are validating a manifest, you may get this error if there are errors in the
        /// manifest. The validator first validates it as a manifest and if that fails it will try
        /// and validate it using the other types.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("body", NullValueHandling = NullValueHandling.Ignore)]
        public Body? Body { get; set; }

        [JsonProperty("motivation", NullValueHandling = NullValueHandling.Ignore)]
        public Motivation? Motivation { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public Target? Target { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Thumbnail { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("behavior", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Behavior { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleItem> Items { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredStatementElement> Metadata { get; set; }

        [JsonProperty("navDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NavDate { get; set; }

        [JsonProperty("navPlace", NullValueHandling = NullValueHandling.Ignore)]
        public NavPlace NavPlace { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProviderElement> Provider { get; set; }

        [JsonProperty("requiredStatement", NullValueHandling = NullValueHandling.Ignore)]
        public RequiredStatementElement RequiredStatement { get; set; }

        [JsonProperty("rights", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Rights { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Services { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Summary { get; set; }
    }

    public partial class PurpleItem
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label")]
        public LanguageValue Label { get; set; }

        [JsonProperty("thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Thumbnail { get; set; }

        /// <summary>
        /// If you are validating a manifest, you may get this error if there are errors in the
        /// manifest. The validator first validates it as a manifest and if that fails it will try
        /// and validate it using the other types.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("behavior", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Behavior { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleItem> Items { get; set; }

        [JsonProperty("metadata", NullValueHandling = NullValueHandling.Ignore)]
        public List<RequiredStatementElement> Metadata { get; set; }

        [JsonProperty("navDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? NavDate { get; set; }

        [JsonProperty("navPlace", NullValueHandling = NullValueHandling.Ignore)]
        public NavPlace NavPlace { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("provider", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProviderElement> Provider { get; set; }

        [JsonProperty("requiredStatement", NullValueHandling = NullValueHandling.Ignore)]
        public RequiredStatementElement RequiredStatement { get; set; }

        [JsonProperty("rights", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Rights { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Services { get; set; }

        [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Summary { get; set; }
    }

    public partial class RequiredStatementElement
    {
        [JsonProperty("label")]
        public LanguageValue Label { get; set; }

        [JsonProperty("value")]
        public LanguageValue Value { get; set; }
    }

    public partial class NavPlace
    {
        [JsonProperty("features", NullValueHandling = NullValueHandling.Ignore)]
        public List<Dictionary<string, object>> Features { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class PartOfElement
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class ProviderElement
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("homepage", NullValueHandling = NullValueHandling.Ignore)]
        public List<HomepageElement> Homepage { get; set; }

        [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThumbnailElement> Logo { get; set; }

        [JsonProperty("seeAlso", NullValueHandling = NullValueHandling.Ignore)]
        public List<RenderingElement> SeeAlso { get; set; }
    }

    public partial class RenderingElement
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("profile", NullValueHandling = NullValueHandling.Ignore)]
        public string Profile { get; set; }
    }

    public partial class StructureElement
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<StructureItem> Items { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("supplementary", NullValueHandling = NullValueHandling.Ignore)]
        public Supplementary Supplementary { get; set; }
    }

    public partial class StructureItem
    {
        [JsonProperty("accessibility", NullValueHandling = NullValueHandling.Ignore)]
        public string Accessibility { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Id { get; set; }

        [JsonProperty("selector", NullValueHandling = NullValueHandling.Ignore)]
        public Selector? Selector { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Source { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("annotations", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationElement> Annotations { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<StructureItem> Items { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }

        [JsonProperty("supplementary", NullValueHandling = NullValueHandling.Ignore)]
        public Supplementary Supplementary { get; set; }
    }

    public partial class Supplementary
    {
        [JsonProperty("id")]
        public Uri Id { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageValue Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("first", NullValueHandling = NullValueHandling.Ignore)]
        public AnnotationElement First { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnnotationItem> Items { get; set; }

        [JsonProperty("last", NullValueHandling = NullValueHandling.Ignore)]
        public AnnotationElement Last { get; set; }

        [JsonProperty("next", NullValueHandling = NullValueHandling.Ignore)]
        public AnnotationElement Next { get; set; }

        [JsonProperty("partOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartOfElement> PartOf { get; set; }

        [JsonProperty("service", NullValueHandling = NullValueHandling.Ignore)]
        public List<ServiceElement> Service { get; set; }
    }

    public partial struct Body
    {
        public List<Dictionary<string, object>> AnythingMapArray;
        public BodyClass BodyClass;

        public static implicit operator Body(List<Dictionary<string, object>> AnythingMapArray) => new Body { AnythingMapArray = AnythingMapArray };
        public static implicit operator Body(BodyClass BodyClass) => new Body { BodyClass = BodyClass };
    }

    public partial struct Motivation
    {
        public string String;
        public List<string> StringArray;

        public static implicit operator Motivation(string String) => new Motivation { String = String };
        public static implicit operator Motivation(List<string> StringArray) => new Motivation { StringArray = StringArray };
    }

    public partial struct SelectorElement
    {
        public Uri PurpleUri;
        public SelectorClass SelectorClass;

        public static implicit operator SelectorElement(Uri PurpleUri) => new SelectorElement { PurpleUri = PurpleUri };
        public static implicit operator SelectorElement(SelectorClass SelectorClass) => new SelectorElement { SelectorClass = SelectorClass };
    }

    public partial struct Selector
    {
        public List<SelectorElement> AnythingArray;
        public Uri PurpleUri;
        public SelectorClass SelectorClass;

        public static implicit operator Selector(List<SelectorElement> AnythingArray) => new Selector { AnythingArray = AnythingArray };
        public static implicit operator Selector(Uri PurpleUri) => new Selector { PurpleUri = PurpleUri };
        public static implicit operator Selector(SelectorClass SelectorClass) => new Selector { SelectorClass = SelectorClass };
    }

    public partial struct TargetElement
    {
        public PurpleAnnotationTargetCanAlsoContainJustScopeAndSource PurpleAnnotationTargetCanAlsoContainJustScopeAndSource;
        public Uri PurpleUri;

        public static implicit operator TargetElement(PurpleAnnotationTargetCanAlsoContainJustScopeAndSource PurpleAnnotationTargetCanAlsoContainJustScopeAndSource) => new TargetElement { PurpleAnnotationTargetCanAlsoContainJustScopeAndSource = PurpleAnnotationTargetCanAlsoContainJustScopeAndSource };
        public static implicit operator TargetElement(Uri PurpleUri) => new TargetElement { PurpleUri = PurpleUri };
    }

    public partial struct Target
    {
        public List<TargetElement> AnythingArray;
        public FluffyAnnotationTargetCanAlsoContainJustScopeAndSource FluffyAnnotationTargetCanAlsoContainJustScopeAndSource;
        public Uri PurpleUri;

        public static implicit operator Target(List<TargetElement> AnythingArray) => new Target { AnythingArray = AnythingArray };
        public static implicit operator Target(FluffyAnnotationTargetCanAlsoContainJustScopeAndSource FluffyAnnotationTargetCanAlsoContainJustScopeAndSource) => new Target { FluffyAnnotationTargetCanAlsoContainJustScopeAndSource = FluffyAnnotationTargetCanAlsoContainJustScopeAndSource };
        public static implicit operator Target(Uri PurpleUri) => new Target { PurpleUri = PurpleUri };
    }

    public partial class Presentation
    {
        public static Presentation FromJson(string json) => JsonConvert.DeserializeObject<Presentation>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Presentation self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Formatting = Formatting.Indented,
            Converters =
            {
                BodyConverter.Singleton,
                MotivationConverter.Singleton,
                TargetConverter.Singleton,
                TargetElementConverter.Singleton,
                SelectorConverter.Singleton,
                SelectorElementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class BodyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Body) || t == typeof(Body?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<BodyClass>(reader);
                    return new Body { BodyClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<Dictionary<string, object>>>(reader);
                    return new Body { AnythingMapArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Body");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Body) untypedValue;
            if (value.AnythingMapArray != null)
            {
                serializer.Serialize(writer, value.AnythingMapArray);
                return;
            }
            if (value.BodyClass != null)
            {
                serializer.Serialize(writer, value.BodyClass);
                return;
            }
            throw new Exception("Cannot marshal type Body");
        }

        public static readonly BodyConverter Singleton = new BodyConverter();
    }

    internal class MinMaxValueCheckConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(double) || t == typeof(double?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<double>(reader);
            if (value >= 0)
            {
                return value;
            }
            throw new Exception("Cannot unmarshal type double");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (double) untypedValue;
            if (value >= 0)
            {
                serializer.Serialize(writer, value);
                return;
            }
            throw new Exception("Cannot marshal type double");
        }

        public static readonly MinMaxValueCheckConverter Singleton = new MinMaxValueCheckConverter();
    }

    internal class MotivationConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Motivation) || t == typeof(Motivation?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Motivation { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<string>>(reader);
                    return new Motivation { StringArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Motivation");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Motivation) untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.StringArray != null)
            {
                serializer.Serialize(writer, value.StringArray);
                return;
            }
            throw new Exception("Cannot marshal type Motivation");
        }

        public static readonly MotivationConverter Singleton = new MotivationConverter();
    }

    internal class TargetConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Target) || t == typeof(Target?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new Target { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FluffyAnnotationTargetCanAlsoContainJustScopeAndSource>(reader);
                    return new Target { FluffyAnnotationTargetCanAlsoContainJustScopeAndSource = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<TargetElement>>(reader);
                    return new Target { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Target");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Target) untypedValue;
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.FluffyAnnotationTargetCanAlsoContainJustScopeAndSource != null)
            {
                serializer.Serialize(writer, value.FluffyAnnotationTargetCanAlsoContainJustScopeAndSource);
                return;
            }
            throw new Exception("Cannot marshal type Target");
        }

        public static readonly TargetConverter Singleton = new TargetConverter();
    }

    internal class TargetElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TargetElement) || t == typeof(TargetElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new TargetElement { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleAnnotationTargetCanAlsoContainJustScopeAndSource>(reader);
                    return new TargetElement { PurpleAnnotationTargetCanAlsoContainJustScopeAndSource = objectValue };
            }
            throw new Exception("Cannot unmarshal type TargetElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TargetElement) untypedValue;
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            if (value.PurpleAnnotationTargetCanAlsoContainJustScopeAndSource != null)
            {
                serializer.Serialize(writer, value.PurpleAnnotationTargetCanAlsoContainJustScopeAndSource);
                return;
            }
            throw new Exception("Cannot marshal type TargetElement");
        }

        public static readonly TargetElementConverter Singleton = new TargetElementConverter();
    }

    internal class SelectorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Selector) || t == typeof(Selector?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new Selector { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<SelectorClass>(reader);
                    return new Selector { SelectorClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<SelectorElement>>(reader);
                    return new Selector { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Selector");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Selector) untypedValue;
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.SelectorClass != null)
            {
                serializer.Serialize(writer, value.SelectorClass);
                return;
            }
            throw new Exception("Cannot marshal type Selector");
        }

        public static readonly SelectorConverter Singleton = new SelectorConverter();
    }

    internal class SelectorElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SelectorElement) || t == typeof(SelectorElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new SelectorElement { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<SelectorClass>(reader);
                    return new SelectorElement { SelectorClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type SelectorElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (SelectorElement) untypedValue;
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            if (value.SelectorClass != null)
            {
                serializer.Serialize(writer, value.SelectorClass);
                return;
            }
            throw new Exception("Cannot marshal type SelectorElement");
        }

        public static readonly SelectorElementConverter Singleton = new SelectorElementConverter();
    }
}
