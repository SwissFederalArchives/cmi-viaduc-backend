// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//    {"TargetFramework":"Net45","NameSpace":"CMI.Contract.Common","CollectionBase":"","Properties":{"AutomaticProperties":true,"PascalCaseProperty":true,"PrivateFieldName":"StartWithCustomPrefix","PrivateFieldCustomPrefix":""},"XmlAttribute":{"Enabled":true},"ClassParams":{"GenerateInSeparateFilesDirectory":""},"Miscellaneous":{"EnableSummaryComment":true,"CleanupCode":false}}
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace CMI.Contract.Common
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// A archveRecord is a container for all the different data that one Unit of Description holds
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecord")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "archiveRecord")]
    public partial class ArchiveRecord
    {

        [System.Xml.Serialization.XmlElementAttribute("security")]
        public ArchiveRecordSecurity Security { get; set; }
        /// <summary>
        /// Data that is used for controlling the UI. Most of the data could be calculated from other data withing the records, but we store it here for fast access.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("display")]
        public ArchiveRecordDisplay Display { get; set; }
        /// <summary>
        /// A wealth of information about the archive record.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("metadata")]
        public ArchiveRecordMetadata Metadata { get; set; }
        /// <summary>
        /// The actual "pyhisical" records. In our case these are either digital born data, or scanned files.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false, ElementName = "primaryData")]
        public List<RepositoryPackage> PrimaryData { get; set; }
        /// <summary>
        /// The internal id of the record from the source system.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "archiveRecordId")]
        public string ArchiveRecordId { get; set; }

        /// <summary>
        /// ArchiveRecord class constructor
        /// </summary>
        public ArchiveRecord()
        {
            this.PrimaryData = new List<RepositoryPackage>();
            this.Metadata = new ArchiveRecordMetadata();
            this.Display = new ArchiveRecordDisplay();
            this.Security = new ArchiveRecordSecurity();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordSecurity")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordSecurity")]
    public partial class ArchiveRecordSecurity
    {

        /// <summary>
        /// accessToken contains a string, identifiying who has access to the UoD.
        /// Examples for the token can be:
        /// - BAR
        /// - Ö3
        /// - Ö2
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("metadataAccessToken", ElementName = "metadataAccessToken")]
        public List<string> MetadataAccessToken { get; set; }
        /// <summary>
        /// accessToken contains a string, identifiying who has access to the fulltext of the primary data files.
        /// Examples for the token can be:
        /// - BAR
        /// - AS_YYYY
        /// - FG_XXXX
        /// - EB_XXXX
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("primaryDataFulltextAccessToken", ElementName = "primaryDataFulltextAccessToken")]
        public List<string> PrimaryDataFulltextAccessToken { get; set; }
        /// <summary>
        /// accessToken contains a string, identifiying who has access to the download of the primary data files.
        /// Examples for the token can be:
        /// - BAR
        /// - AS_YYYY
        /// - FG_XXXX
        /// - EB_XXXXX
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("primaryDataDownloadAccessToken", ElementName = "primaryDataDownloadAccessToken")]
        public List<string> PrimaryDataDownloadAccessToken { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("aggregationField")]
    public partial class AggregationField
    {

        [System.Xml.Serialization.XmlElementAttribute("values", ElementName = "values")]
        public List<string> Values { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "aggregationName")]
        public string AggregationName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("repositoryPackage")]
    public partial class RepositoryPackage
    {

        [System.Xml.Serialization.XmlElementAttribute("folders", ElementName = "folders")]
        public List<RepositoryFolder> Folders { get; set; }
        /// <summary>
        /// A collection of files
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("files", ElementName = "files")]
        public List<RepositoryFile> Files { get; set; }
        /// <summary>
        /// The total size of all files in the package in bytes.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sizeInBytes")]
        public long SizeInBytes { get; set; }
        /// <summary>
        /// The total number of all files in the package.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "fileCount")]
        public int FileCount { get; set; }
        /// <summary>
        /// A string containing an identifier to find the root of the package in the digital repository.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "packageId")]
        public string PackageId { get; set; }
        /// <summary>
        /// The name of the zip file. The name must be without path information.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "packageFileName")]
        public string PackageFileName { get; set; }
        /// <summary>
        /// Returns the duration in ticks for extracting all data from the repository.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "repositoryExtractionDuration")]
        public long RepositoryExtractionDuration { get; set; }
        /// <summary>
        /// Returns the duration in ticks for extracting the full text of all files in the package (if any).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "fulltextExtractionDuration")]
        public long FulltextExtractionDuration { get; set; }
        /// <summary>
        /// In case the package is used as a standalone type, the archive record id identifies to which record this package belongs.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "archiveRecordId")]
        public string ArchiveRecordId { get; set; }

        /// <summary>
        /// RepositoryPackage class constructor
        /// </summary>
        public RepositoryPackage()
        {
            this.Files = new List<RepositoryFile>();
            this.Folders = new List<RepositoryFolder>();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("repositoryFolder")]
    public partial class RepositoryFolder
    {

        [System.Xml.Serialization.XmlElementAttribute("logicalName")]
        public string LogicalName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("physicalName")]
        public string PhysicalName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("id")]
        public string Id { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("sipId")]
        public string SipId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("sipType")]
        public RepositoryFolderSipType SipType { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("folders", ElementName = "folders")]
        public List<RepositoryFolder> Folders { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("files", ElementName = "files")]
        public List<RepositoryFile> Files { get; set; }

        /// <summary>
        /// RepositoryFolder class constructor
        /// </summary>
        public RepositoryFolder()
        {
            this.Files = new List<RepositoryFile>();
            this.Folders = new List<RepositoryFolder>();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "repositoryFolderSipType")]
    [System.Xml.Serialization.XmlRootAttribute("repositoryFolderSipType")]
    public enum RepositoryFolderSipType
    {

        dossier,

        dokument,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("repositoryFile")]
    public partial class RepositoryFile
    {

        /// <summary>
        /// Contains the file name including the extension, but without the path information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("logicalName")]
        public string LogicalName { get; set; }
        /// <summary>
        /// Contains the file name as written to disk. In case the logical name has reserved characters or is to long.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("physicalName")]
        public string PhysicalName { get; set; }
        /// <summary>
        /// The original name as definied in the SIP
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sipOriginalName")]
        public string SipOriginalName { get; set; }
        /// <summary>
        /// Indicates the mime type.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mimeType")]
        public string MimeType { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("hash")]
        public string Hash { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("hashAlgorithm")]
        public string HashAlgorithm { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("exported")]
        public bool Exported { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("skipOCR")]
        public bool SkipOCR { get; set; }
        /// <summary>
        /// The id to locate the item in the repository
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("id")]
        public string Id { get; set; }
        /// <summary>
        /// The file id as definied in the SIP.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sipId")]
        public string SipId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("extendedProperties", ElementName = "extendedProperties")]
        public List<ExtendedProperty> ExtendedProperties { get; set; }
        /// <summary>
        /// The whole content of the document as text only. Can be used for full text indexing.
        /// (Optional, as text extracting is probably done later in the process.)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("contentText")]
        public string ContentText { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sizeInBytes")]
        public long SizeInBytes { get; set; }

        /// <summary>
        /// RepositoryFile class constructor
        /// </summary>
        public RepositoryFile()
        {
            this.ExtendedProperties = new List<ExtendedProperty>();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("extendedProperty")]
    public partial class ExtendedProperty
    {

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
    }

    /// <summary>
    /// An archive context item contains all necessary information to show/display an archive record within the archive plan.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveplanContextItem")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "archiveplanContextItem")]
    public partial class ArchiveplanContextItem
    {

        /// <summary>
        /// A simple id identifying an icon
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("iconId")]
        public int IconId { get; set; }
        /// <summary>
        /// The level of the current item, e.g. series, document, fonds
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("level")]
        public string Level { get; set; }
        /// <summary>
        /// The reference code of the item
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("refCode")]
        public string RefCode { get; set; }
        /// <summary>
        /// The title of the item.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("title")]
        public string Title { get; set; }
        /// <summary>
        /// The date range of the item expressed as a string.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dateRangeText")]
        public string DateRangeText { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "archiveRecordId")]
        public string ArchiveRecordId { get; set; }
    }

    /// <summary>
    /// This element is a container for describing a descriptor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "descriptor")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "descriptor")]
    public partial class Descriptor
    {

        [System.Xml.Serialization.XmlElementAttribute("name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("description")]
        public string Description { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("otherLanguageNames")]
        public string OtherLanguageNames { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("idName")]
        public string IdName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("seeAlso", ElementName = "seeAlso")]
        public List<string> SeeAlso { get; set; }
        /// <summary>
        /// Optional a function describing in what kind of relationship this descriptor represents.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "function")]
        public string Function { get; set; }
        /// <summary>
        /// Indicates the thesaurus from which this descriptor is coming from.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "thesaurus")]
        public string Thesaurus { get; set; }
        /// <summary>
        /// Defines the origin of the descriptor. Can be used to differentiate between manual given keywords or keywords that were auto extracted from the text using some kind of speech services.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "source")]
        public string Source { get; set; }
    }

    /// <summary>
    /// Data that is used for controlling the UI. Most of the data could be calculated from other data withing the records, but we store it here for fast access.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordDisplay")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordDisplay")]
    public partial class ArchiveRecordDisplay
    {

        /// <summary>
        /// The name or identification of the display template to use for public view.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("externalDisplayTemplateName")]
        public string ExternalDisplayTemplateName { get; set; }
        /// <summary>
        /// The name or identification of the display template to use for internal view.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("internalDisplayTemplateName")]
        public string InternalDisplayTemplateName { get; set; }
        /// <summary>
        /// A flag indicating if the archive items contains any images.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("containsImages")]
        public bool ContainsImages { get; set; }
        /// <summary>
        /// A flag indicating if the archive items contains any videos or audio files.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("containsMedia")]
        public bool ContainsMedia { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("canBeOrdered")]
        public bool CanBeOrdered { get; set; }
        /// <summary>
        /// A list that contains all the information to quickly build an archive plan for display.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("archiveplanContextItem", IsNullable = false, ElementName = "archiveplanContext")]
        public List<ArchiveplanContextItem> ArchiveplanContext { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "previousArchiveRecordId")]
        public string PreviousArchiveRecordId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "nextArchiveRecordId")]
        public string NextArchiveRecordId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "parentArchiveRecordId")]
        public string ParentArchiveRecordId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "firstChildArchiveRecordId")]
        public string FirstChildArchiveRecordId { get; set; }

        /// <summary>
        /// ArchiveRecordDisplay class constructor
        /// </summary>
        public ArchiveRecordDisplay()
        {
            this.ArchiveplanContext = new List<ArchiveplanContextItem>();
        }
    }

    /// <summary>
    /// A wealth of information about the archive record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadata")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadata")]
    public partial class ArchiveRecordMetadata
    {

        [System.Xml.Serialization.XmlArrayItemAttribute("dataElement", IsNullable = false, ElementName = "detailData")]
        public List<DataElement> DetailData { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("usage")]
        public ArchiveRecordMetadataUsage Usage { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("nodeInfo")]
        public NodeInfo NodeInfo { get; set; }
        /// <summary>
        /// A list of descriptors (keywords) that help categorize the current UoD.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("descriptor", IsNullable = false, ElementName = "descriptors")]
        public List<Descriptor> Descriptors { get; set; }
        /// <summary>
        /// A list with containers where the archival records are physically stored.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("containers")]
        public ArchiveRecordMetadataContainers Containers { get; set; }
        /// <summary>
        /// ArchiveRecords may be linked to other archiveRecords.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("reference", IsNullable = false, ElementName = "references")]
        public List<ArchiveRecordMetadataReference> References { get; set; }
        /// <summary>
        /// The year in which this record was added to the archive collection.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("accessionDate")]
        public int AccessionDate { get; set; }
        /// <summary>
        /// A link or other identifier to the primary data for the unit.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("primaryDataLink")]
        public string PrimaryDataLink { get; set; }
        /// <summary>
        /// A collection of special values that allows filtering in the search client.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable = false, ElementName = "aggregationFields")]
        public List<AggregationField> AggregationFields { get; set; }

        /// <summary>
        /// ArchiveRecordMetadata class constructor
        /// </summary>
        public ArchiveRecordMetadata()
        {
            this.AggregationFields = new List<AggregationField>();
            this.References = new List<ArchiveRecordMetadataReference>();
            this.Containers = new ArchiveRecordMetadataContainers();
            this.Descriptors = new List<Descriptor>();
            this.NodeInfo = new NodeInfo();
            this.Usage = new ArchiveRecordMetadataUsage();
            this.DetailData = new List<DataElement>();
        }
    }

    /// <summary>
    /// A data element is a container for an individual field. It can consists of one ore more values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElement")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "dataElement")]
    public partial class DataElement
    {

        [System.Xml.Serialization.XmlElementAttribute("elementValue", ElementName = "elementValue")]
        public List<DataElementElementValue> ElementValue { get; set; }
        /// <summary>
        /// Optionally the internal id of the element if any.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "elementId")]
        public string ElementId { get; set; }
        /// <summary>
        /// A unique name for an element.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "elementName")]
        public string ElementName { get; set; }
        /// <summary>
        /// Optionally the EAD code for that element.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "eadCode")]
        public string EadCode { get; set; }
        /// <summary>
        /// The specific type of that data element.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "elementType")]
        public DataElementElementType ElementType { get; set; }
        /// <summary>
        /// Indicates if the value of this element should be added to the full text index.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "includeInFullTextIndex")]
        public bool IncludeInFullTextIndex { get; set; }
        /// <summary>
        /// Indicates the visibility of this element. Can either be public or internal
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "visibility")]
        public DataElementVisibility Visibility { get; set; }

        /// <summary>
        /// DataElement class constructor
        /// </summary>
        public DataElement()
        {
            this.ElementValue = new List<DataElementElementValue>();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValue")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValue")]
    public partial class DataElementElementValue
    {

        /// <summary>
        /// A data element can have several text representations in different languages. Mostly, only default language representation will be available, but for date ranges (ca. 1950 / approx. 1950) or boolans (Ja / Yes) different languages will be available.
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("textValue", IsNullable = false, ElementName = "textValues")]
        public List<DataElementElementValueTextValue> TextValues { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("dateRange")]
        public DateRange DateRange { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("durationInSeconds")]
        public int DurationInSeconds { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("floatValue")]
        public DataElementElementValueFloatValue FloatValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("intValue")]
        public int IntValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("booleanValue")]
        public bool BooleanValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "time", ElementName = "timeValue")]
        public System.DateTime TimeValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", ElementName = "dateValue")]
        public System.DateTime DateValue { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("blobValueBase64")]
        public DataElementElementValueBlobValueBase64 BlobValueBase64 { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("link")]
        public DataElementElementValueLink Link { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("entityLink")]
        public DataElementElementValueEntityLink EntityLink { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sequence")]
        public int Sequence { get; set; }

        /// <summary>
        /// DataElementElementValue class constructor
        /// </summary>
        public DataElementElementValue()
        {
            this.EntityLink = new DataElementElementValueEntityLink();
            this.Link = new DataElementElementValueLink();
            this.BlobValueBase64 = new DataElementElementValueBlobValueBase64();
            this.FloatValue = new DataElementElementValueFloatValue();
            this.DateRange = new DateRange();
            this.TextValues = new List<DataElementElementValueTextValue>();
        }
    }

    /// <summary>
    /// Each element must have a text representation. For textual values this is the text itself. For a duration it could be "1 hour 12min" or for a date range it could be "ca. 1960 - ca. 1970"
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValueTextValue")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValueTextValue")]
    public partial class DataElementElementValueTextValue
    {

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "language", AttributeName = "lang")]
        public string Lang { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "isDefaultLang")]
        public bool IsDefaultLang { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
    }

    /// <summary>
    /// This element is used to describe a date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dateRange")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "dateRange")]
    public partial class DateRange
    {

        /// <summary>
        /// Date is entered as a string in the form +YYYYMMDD. Depending on how many digits are entered the "exactness" of the date is evaluated.
        /// First digit plus or minus
        /// 3 digits = Century
        /// 5 digits = Year
        /// 7 digits = Year and Month
        /// 9 digits = Year, month, day
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("from")]
        public string From { get; set; }
        /// <summary>
        /// The FromDate is calculated using the text representation from the field From. Depending on the exactness the actual start date the value is set.
        /// For example
        /// 15 --> 01.01.1401
        /// 1912 --> 01.01.1912
        /// 191205 --> 01.05.1912
        /// 19991224 --> 24.12.1999
        /// 
        /// If the date operator is "before", "to", "s.d." or "N/A" the FromDate equals DateTime.Min
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", ElementName = "fromDate")]
        public System.DateTime FromDate { get; set; }
        /// <summary>
        /// The SearchFromDate is usually identical to the FromDate. But if the FromApproxIndicator is true we move the from date to an earlier date. How much depends on the whole date range and the precision of the from date.
        /// This is required for the best possible search experience using date ranges.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", ElementName = "searchFromDate")]
        public System.DateTime SearchFromDate { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("fromApproxIndicator")]
        public bool FromApproxIndicator { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("to")]
        public string To { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", ElementName = "toDate")]
        public System.DateTime ToDate { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", ElementName = "searchToDate")]
        public System.DateTime SearchToDate { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("toApproxIndicator")]
        public bool ToApproxIndicator { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "dateOperator")]
        public DateRangeDateOperator DateOperator { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dateRangeDateOperator")]
    [System.Xml.Serialization.XmlRootAttribute("dateRangeDateOperator")]
    public enum DateRangeDateOperator
    {

        between,

        fromTo,

        after,

        startingWith,

        before,

        to,

        [System.Xml.Serialization.XmlEnumAttribute("s.d.")]
        sd,

        exact,

        [System.Xml.Serialization.XmlEnumAttribute("n/a")]
        na,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValueFloatValue")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValueFloatValue")]
    public partial class DataElementElementValueFloatValue
    {

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "decimalPositions")]
        public int DecimalPositions { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public float Value { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValueBlobValueBase64")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValueBlobValueBase64")]
    public partial class DataElementElementValueBlobValueBase64
    {

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "mimeType")]
        public string MimeType { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValueLink")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValueLink")]
    public partial class DataElementElementValueLink
    {

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "href")]
        public string Href { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementValueEntityLink")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementValueEntityLink")]
    public partial class DataElementElementValueEntityLink
    {

        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "entityRecordId")]
        public string EntityRecordId { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "entityType")]
        public string EntityType { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementElementType")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementElementType")]
    public enum DataElementElementType
    {

        text,

        memo,

        selection,

        date,

        datePrecise,

        dateRange,

        integer,

        @float,

        boolean,

        time,

        timespan,

        hyperlink,

        header,

        entityLink,

        accrual,

        fileLink,

        mailLink,

        image,

        media,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "dataElementVisibility")]
    [System.Xml.Serialization.XmlRootAttribute("dataElementVisibility")]
    public enum DataElementVisibility
    {

        @public,

        @internal,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadataUsage")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadataUsage")]
    public partial class ArchiveRecordMetadataUsage
    {

        /// <summary>
        /// Internal flag indicating that the unit should be visible online. Can be used to override a protection end date. Attribute is used in the calculation of the end visibility of meta- and primarydata.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("alwaysVisibleOnline")]
        public bool AlwaysVisibleOnline { get; set; }
        /// <summary>
        /// Indicates if the material can be used in the reading room.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("isPhysicalyUsable")]
        public bool IsPhysicalyUsable { get; set; }
        /// <summary>
        /// Flag indicating that the material contains person related information.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("containsPersonRelatedData")]
        public bool ContainsPersonRelatedData { get; set; }
        /// <summary>
        /// The protection category (Schutzfristkategorie)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("protectionCategory")]
        public string ProtectionCategory { get; set; }
        /// <summary>
        /// The type of base date used to calculate the protection end date.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "protectionBaseDate")]
        public string ProtectionBaseDate { get; set; }
        /// <summary>
        /// The protection duration in years according to the protection category.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "protectionDuration")]
        public System.Nullable<int> ProtectionDuration { get; set; }
        /// <summary>
        /// The protection end date. (Schutzfrist Enddatum)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", IsNullable = true, ElementName = "protectionEndDate")]
        public System.Nullable<System.DateTime> ProtectionEndDate { get; set; }
        /// <summary>
        /// Indicates if the protection end date cannot be underrun. (Nicht unterschreitbar).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("cannotFallBelow")]
        public bool CannotFallBelow { get; set; }
        /// <summary>
        /// A flag indicating if the protection duration was manually adjusted and is not the default according to the protection category anymore.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("adjustedManually")]
        public bool AdjustedManually { get; set; }
        /// <summary>
        /// An optional note about the protection situation.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("protectionNote")]
        public string ProtectionNote { get; set; }
        /// <summary>
        /// Indicates the type of permission needed. (Bewilligung)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("permission")]
        public string Permission { get; set; }
        /// <summary>
        /// Indicates the physical usability of the archive item. (Physische Benutzerbarkeit)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("physicalUsability")]
        public string PhysicalUsability { get; set; }
        /// <summary>
        /// Indication about the accessibility of the item. (Zugänglichkeit)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("accessibility")]
        public string Accessibility { get; set; }
        /// <summary>
        /// Optionl notes about the usage.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("usageNotes")]
        public object UsageNotes { get; set; }
        /// <summary>
        /// Optional indication of the creative commons license for the item.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("license")]
        public ArchiveRecordMetadataUsageLicense License { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadataUsageLicense")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadataUsageLicense")]
    public enum ArchiveRecordMetadataUsageLicense
    {

        CC0,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY")]
        CCBY,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY-SA")]
        CCBYSA,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY-ND")]
        CCBYND,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY-NC")]
        CCBYNC,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY-NC-SA")]
        CCBYNCSA,

        [System.Xml.Serialization.XmlEnumAttribute("CC BY-NC-ND")]
        CCBYNCND,

        Undefined,
    }

    /// <summary>
    /// The node information defines the position of this archive record in regard to the other records. Archive records are arranged in a hierarchy (tree graph).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "nodeInfo")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "nodeInfo")]
    public partial class NodeInfo
    {

        /// <summary>
        /// The id of the parent node. Each archive record has exactly one parent, except for the root node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, ElementName = "parentArchiveRecordId")]
        public string ParentArchiveRecordId { get; set; }
        /// <summary>
        /// The path is the concatenated string containing the archive record ids from the root down to the current level.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("path")]
        public string Path { get; set; }
        /// <summary>
        /// The sequence defines the order in which the current item is positioned within all the childs of the parent receord.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sequence")]
        public int Sequence { get; set; }
        /// <summary>
        /// A leaf is a node without a child
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("isLeaf")]
        public bool IsLeaf { get; set; }
        /// <summary>
        /// Indicates a root node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("isRoot")]
        public bool IsRoot { get; set; }
        /// <summary>
        /// The level of a node is defined by 1 + (the number of connections between the node and the root).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("level")]
        public int Level { get; set; }
        /// <summary>
        /// The number of children of this node.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("childCount")]
        public long ChildCount { get; set; }
    }

    /// <summary>
    /// A list with containers where the archival records are physically stored.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadataContainers")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadataContainers")]
    public partial class ArchiveRecordMetadataContainers
    {

        /// <summary>
        /// This element contains the data describing a container.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("container", ElementName = "container")]
        public List<ArchiveRecordMetadataContainersContainer> Container { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "numberOfContainers")]
        public int NumberOfContainers { get; set; }

        /// <summary>
        /// ArchiveRecordMetadataContainers class constructor
        /// </summary>
        public ArchiveRecordMetadataContainers()
        {
            this.Container = new List<ArchiveRecordMetadataContainersContainer>();
        }
    }

    /// <summary>
    /// This element contains the data describing a container.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadataContainersContainer")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadataContainersContainer")]
    public partial class ArchiveRecordMetadataContainersContainer
    {

        [System.Xml.Serialization.XmlElementAttribute("containerLocation")]
        public string ContainerLocation { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("containerType")]
        public string ContainerType { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("idName")]
        public string IdName { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("containerCode")]
        public string ContainerCode { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("containerCarrierMaterial")]
        public string ContainerCarrierMaterial { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "archiveRecordMetadataReference")]
    [System.Xml.Serialization.XmlRootAttribute("archiveRecordMetadataReference")]
    public partial class ArchiveRecordMetadataReference
    {

        /// <summary>
        /// A human readable name for the linked entity.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("referenceName")]
        public string ReferenceName { get; set; }
        /// <summary>
        /// The role the linked entity has. Roles may be "see also", "related content found in", "successor",
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("role")]
        public string Role { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "archiveRecordId")]
        public string ArchiveRecordId { get; set; }
    }

    /// <summary>
    /// This element is used to list all individual datafields the item can have.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, TypeName = "detailData")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false, ElementName = "detailData")]
    public partial class DetailData
    {

        [System.Xml.Serialization.XmlElementAttribute("dataElement", ElementName = "dataElement")]
        public List<DataElement> DataElement { get; set; }

        /// <summary>
        /// DetailData class constructor
        /// </summary>
        public DetailData()
        {
            this.DataElement = new List<DataElement>();
        }
    }
}
#pragma warning restore
